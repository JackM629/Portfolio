/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package guitartabdeveloper;

import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Jack Martin (15009787)
 * 
 */

public class RunGUI extends javax.swing.JFrame {

    /**
     * Creates new form RunGUI
     */
    
    public RunGUI() {
        initComponents();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        addNewTabPanel = new javax.swing.JPanel();
        standardGuitarButton = new javax.swing.JRadioButton();
        sevenStringGuitarButton = new javax.swing.JRadioButton();
        eightStringGuitarButton = new javax.swing.JRadioButton();
        bassGuitarButton = new javax.swing.JRadioButton();
        quarterNoteButton = new javax.swing.JRadioButton();
        halfNoteButton = new javax.swing.JRadioButton();
        wholeNoteButton = new javax.swing.JRadioButton();
        eighthNoteButton = new javax.swing.JRadioButton();
        sixteenthNoteButton = new javax.swing.JRadioButton();
        thirtyTwothNoteButton = new javax.swing.JRadioButton();
        dottedNoteButton = new javax.swing.JRadioButton();
        addNoteButton = new javax.swing.JButton();
        palmMuteButton = new javax.swing.JRadioButton();
        bendButton = new javax.swing.JRadioButton();
        preBendButton = new javax.swing.JRadioButton();
        hammerOnButton = new javax.swing.JRadioButton();
        pullOffButton = new javax.swing.JRadioButton();
        slideUpButton = new javax.swing.JRadioButton();
        slideDownButton = new javax.swing.JRadioButton();
        vibratoButton = new javax.swing.JRadioButton();
        harmonicButton = new javax.swing.JRadioButton();
        pinchHarmonicButton = new javax.swing.JRadioButton();
        tapNoteButton = new javax.swing.JRadioButton();
        changeBeatsPerBarButton = new javax.swing.JButton();
        restButton = new javax.swing.JRadioButton();
        partOfChordButton = new javax.swing.JRadioButton();
        noneButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabOutputField = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        editTuningButton = new javax.swing.JButton();
        singleNoteButton = new javax.swing.JRadioButton();
        stringDropDownMenu = new javax.swing.JComboBox<>();
        fretDropDownMenu = new javax.swing.JComboBox<>();
        stringLabel = new javax.swing.JLabel();
        fretLabel = new javax.swing.JLabel();
        finishChordButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        bendAndReleaseButton = new javax.swing.JRadioButton();
        preBendAndReleaseButton = new javax.swing.JRadioButton();
        browseDatabasePanel = new javax.swing.JPanel();
        searchLabel = new javax.swing.JLabel();
        searchTextBox = new javax.swing.JTextField();
        editSongInfoButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        databaseResultsBox = new javax.swing.JScrollPane();
        databaseResultsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Guitar Tab Developer");

        standardGuitarButton.setText("Standard Guitar");
        standardGuitarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardGuitarButtonActionPerformed(evt);
            }
        });

        sevenStringGuitarButton.setText("7 String Guitar");
        sevenStringGuitarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenStringGuitarButtonActionPerformed(evt);
            }
        });

        eightStringGuitarButton.setText("8 String Guitar");
        eightStringGuitarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightStringGuitarButtonActionPerformed(evt);
            }
        });

        bassGuitarButton.setText("Bass Guitar");
        bassGuitarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bassGuitarButtonActionPerformed(evt);
            }
        });

        quarterNoteButton.setText("1/4");
        quarterNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quarterNoteButtonActionPerformed(evt);
            }
        });

        halfNoteButton.setText("1/2");
        halfNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                halfNoteButtonActionPerformed(evt);
            }
        });

        wholeNoteButton.setText("Whole");
        wholeNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wholeNoteButtonActionPerformed(evt);
            }
        });

        eighthNoteButton.setText("1/8");
        eighthNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eighthNoteButtonActionPerformed(evt);
            }
        });

        sixteenthNoteButton.setText("1/16");
        sixteenthNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixteenthNoteButtonActionPerformed(evt);
            }
        });

        thirtyTwothNoteButton.setText("1/32");
        thirtyTwothNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thirtyTwothNoteButtonActionPerformed(evt);
            }
        });

        dottedNoteButton.setText("Dotted");
        dottedNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dottedNoteButtonActionPerformed(evt);
            }
        });

        addNoteButton.setText("Add Note");
        addNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoteButtonActionPerformed(evt);
            }
        });

        palmMuteButton.setText("Palm Mute");
        palmMuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                palmMuteButtonActionPerformed(evt);
            }
        });

        bendButton.setText("Bend");
        bendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bendButtonActionPerformed(evt);
            }
        });

        preBendButton.setText("Pre Bend");
        preBendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preBendButtonActionPerformed(evt);
            }
        });

        hammerOnButton.setText("Hammer On");
        hammerOnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hammerOnButtonActionPerformed(evt);
            }
        });

        pullOffButton.setText("Pull Off");
        pullOffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pullOffButtonActionPerformed(evt);
            }
        });

        slideUpButton.setText("Slide Up");
        slideUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slideUpButtonActionPerformed(evt);
            }
        });

        slideDownButton.setText("Slide Down");
        slideDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slideDownButtonActionPerformed(evt);
            }
        });

        vibratoButton.setText("Vibrato");
        vibratoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vibratoButtonActionPerformed(evt);
            }
        });

        harmonicButton.setText("Harmonic");
        harmonicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                harmonicButtonActionPerformed(evt);
            }
        });

        pinchHarmonicButton.setText("Pinch Harmonic");
        pinchHarmonicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinchHarmonicButtonActionPerformed(evt);
            }
        });

        tapNoteButton.setText("Tap Note");
        tapNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapNoteButtonActionPerformed(evt);
            }
        });

        changeBeatsPerBarButton.setText("Change Beats Per Bar");
        changeBeatsPerBarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBeatsPerBarButtonActionPerformed(evt);
            }
        });

        restButton.setText("Rest");
        restButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restButtonActionPerformed(evt);
            }
        });

        partOfChordButton.setText("Part of Chord");
        partOfChordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partOfChordButtonActionPerformed(evt);
            }
        });

        noneButton.setText("None");
        noneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noneButtonActionPerformed(evt);
            }
        });

        tabOutputField.setEditable(false);
        tabOutputField.setColumns(20);
        tabOutputField.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        tabOutputField.setRows(5);
        jScrollPane1.setViewportView(tabOutputField);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        editTuningButton.setText("Edit Tuning");
        editTuningButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTuningButtonActionPerformed(evt);
            }
        });

        singleNoteButton.setText("Single Note");
        singleNoteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleNoteButtonActionPerformed(evt);
            }
        });

        stringDropDownMenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));
        stringDropDownMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stringDropDownMenuActionPerformed(evt);
            }
        });

        fretDropDownMenu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));
        fretDropDownMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fretDropDownMenuActionPerformed(evt);
            }
        });

        stringLabel.setText("String");

        fretLabel.setText("Fret");

        finishChordButton.setText("Finish Chord");
        finishChordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishChordButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        undoButton.setText("Undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        bendAndReleaseButton.setText("Bend and Release");
        bendAndReleaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bendAndReleaseButtonActionPerformed(evt);
            }
        });

        preBendAndReleaseButton.setText("Pre Bend and Release");
        preBendAndReleaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preBendAndReleaseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addNewTabPanelLayout = new javax.swing.GroupLayout(addNewTabPanel);
        addNewTabPanel.setLayout(addNewTabPanelLayout);
        addNewTabPanelLayout.setHorizontalGroup(
            addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(addNewTabPanelLayout.createSequentialGroup()
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                .addComponent(restButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(partOfChordButton))
                            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                .addComponent(quarterNoteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(halfNoteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(wholeNoteButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                .addComponent(singleNoteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dottedNoteButton))
                            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                .addComponent(eighthNoteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sixteenthNoteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(thirtyTwothNoteButton))))
                    .addGroup(addNewTabPanelLayout.createSequentialGroup()
                        .addComponent(standardGuitarButton)
                        .addGap(14, 14, 14)
                        .addComponent(bassGuitarButton)
                        .addGap(18, 18, 18)
                        .addComponent(sevenStringGuitarButton)
                        .addGap(18, 18, 18)
                        .addComponent(eightStringGuitarButton))
                    .addGroup(addNewTabPanelLayout.createSequentialGroup()
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                .addComponent(noneButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bendButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(preBendButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bendAndReleaseButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(preBendAndReleaseButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(hammerOnButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pullOffButton))
                            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                .addComponent(slideUpButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(slideDownButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(vibratoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(harmonicButton)
                                .addGap(6, 6, 6)
                                .addComponent(pinchHarmonicButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(palmMuteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tapNoteButton)))
                        .addGap(84, 84, 84)
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(changeBeatsPerBarButton)
                            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(helpButton)
                                    .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(stringLabel)
                                        .addComponent(stringDropDownMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                        .addComponent(fretDropDownMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(editTuningButton))
                                    .addComponent(fretLabel)
                                    .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                        .addComponent(undoButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(finishChordButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addNoteButton))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addNewTabPanelLayout.createSequentialGroup()
                                        .addComponent(loadButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saveButton)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addNewTabPanelLayout.setVerticalGroup(
            addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standardGuitarButton)
                    .addComponent(sevenStringGuitarButton)
                    .addComponent(eightStringGuitarButton)
                    .addComponent(bassGuitarButton)
                    .addComponent(changeBeatsPerBarButton))
                .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(addNewTabPanelLayout.createSequentialGroup()
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addNewTabPanelLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(stringLabel)
                                    .addComponent(fretLabel)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addNewTabPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(quarterNoteButton)
                                    .addComponent(halfNoteButton)
                                    .addComponent(wholeNoteButton)
                                    .addComponent(eighthNoteButton)
                                    .addComponent(sixteenthNoteButton)
                                    .addComponent(thirtyTwothNoteButton))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dottedNoteButton)
                            .addComponent(partOfChordButton)
                            .addComponent(singleNoteButton)
                            .addComponent(stringDropDownMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fretDropDownMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(restButton)
                            .addComponent(editTuningButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(saveButton))
                        .addGap(29, 29, 29))
                    .addGroup(addNewTabPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bendButton)
                            .addComponent(preBendButton)
                            .addComponent(noneButton)
                            .addComponent(bendAndReleaseButton)
                            .addComponent(hammerOnButton)
                            .addComponent(pullOffButton)
                            .addComponent(preBendAndReleaseButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addNewTabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(slideDownButton)
                            .addComponent(vibratoButton)
                            .addComponent(harmonicButton)
                            .addComponent(pinchHarmonicButton)
                            .addComponent(palmMuteButton)
                            .addComponent(slideUpButton)
                            .addComponent(helpButton)
                            .addComponent(undoButton)
                            .addComponent(finishChordButton)
                            .addComponent(addNoteButton)
                            .addComponent(tapNoteButton))))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        tabbedPane.addTab("Add/Edit Tab", addNewTabPanel);

        searchLabel.setText("Enter song or artist name:");

        searchTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextBoxActionPerformed(evt);
            }
        });

        editSongInfoButton.setText("Edit Song Info");
        editSongInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSongInfoButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        databaseResultsBox.setViewportView(databaseResultsTable);

        javax.swing.GroupLayout browseDatabasePanelLayout = new javax.swing.GroupLayout(browseDatabasePanel);
        browseDatabasePanel.setLayout(browseDatabasePanelLayout);
        browseDatabasePanelLayout.setHorizontalGroup(
            browseDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseDatabasePanelLayout.createSequentialGroup()
                .addGroup(browseDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(browseDatabasePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(databaseResultsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, browseDatabasePanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(browseDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(editSongInfoButton)
                            .addComponent(searchLabel)
                            .addGroup(browseDatabasePanelLayout.createSequentialGroup()
                                .addComponent(searchTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchButton)))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        browseDatabasePanelLayout.setVerticalGroup(
            browseDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(browseDatabasePanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(searchLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(browseDatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addGap(18, 18, 18)
                .addComponent(databaseResultsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editSongInfoButton)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Browse Database", browseDatabasePanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void finishChordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishChordButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.finishChord();
    }//GEN-LAST:event_finishChordButtonActionPerformed

    private void fretDropDownMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fretDropDownMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fretDropDownMenuActionPerformed

    private void stringDropDownMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stringDropDownMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stringDropDownMenuActionPerformed

    private void singleNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleNoteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setOtherOption(2);
    }//GEN-LAST:event_singleNoteButtonActionPerformed

    private void editTuningButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTuningButtonActionPerformed
        // TODO add your handling code here:
        if (instruments.getSelection() != null) {
            String tuning = JOptionPane.showInputDialog(null, "Please enter the desired tuning separating each note with a space");
            String errorMsg = tabWriter.validateTuning(tuning);
            if (errorMsg == null) {
                tabWriter.setTuning(tuning);
                tabOutputField.setText(tabWriter.displayOutput());
            }
            else {
                JOptionPane.showMessageDialog(null, errorMsg);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select an instrument first");
        }
    }//GEN-LAST:event_editTuningButtonActionPerformed

    private void noneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(0);
    }//GEN-LAST:event_noneButtonActionPerformed

    private void partOfChordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partOfChordButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setOtherOption(1);
    }//GEN-LAST:event_partOfChordButtonActionPerformed

    private void restButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setOtherOption(0);
    }//GEN-LAST:event_restButtonActionPerformed

    private void changeBeatsPerBarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeBeatsPerBarButtonActionPerformed
        // TODO add your handling code here:
        boolean inputValid = false;
        String input = "";
        while (inputValid == false) {
            input = JOptionPane.showInputDialog("Enter beats per bar");
            inputValid = tabWriter.stringNumeric(input);
            if (inputValid == false) {
                JOptionPane.showMessageDialog(null, "Beats per bar must be numeric");
            }
        }
        int beatsPerBar = Integer.parseInt(input);
        tabWriter.setBeatsPerBar(beatsPerBar);
    }//GEN-LAST:event_changeBeatsPerBarButtonActionPerformed

    private void tapNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapNoteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(11);
    }//GEN-LAST:event_tapNoteButtonActionPerformed

    private void pinchHarmonicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinchHarmonicButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(10);
    }//GEN-LAST:event_pinchHarmonicButtonActionPerformed

    private void harmonicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_harmonicButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(9);
    }//GEN-LAST:event_harmonicButtonActionPerformed

    private void vibratoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vibratoButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(8);
    }//GEN-LAST:event_vibratoButtonActionPerformed

    private void slideDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slideDownButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(7);
    }//GEN-LAST:event_slideDownButtonActionPerformed

    private void slideUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slideUpButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(6);
    }//GEN-LAST:event_slideUpButtonActionPerformed

    private void pullOffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pullOffButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(5);
    }//GEN-LAST:event_pullOffButtonActionPerformed

    private void hammerOnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hammerOnButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(4);
    }//GEN-LAST:event_hammerOnButtonActionPerformed

    private void preBendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preBendButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(3);
    }//GEN-LAST:event_preBendButtonActionPerformed

    private void bendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bendButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(1);
    }//GEN-LAST:event_bendButtonActionPerformed

    private void palmMuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_palmMuteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNoteType(12);
    }//GEN-LAST:event_palmMuteButtonActionPerformed

    private void addNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoteButtonActionPerformed
        // TODO add your handling code here:
        if (instruments.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select a guitar type first");
        }
        else if (noteLengths.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select a note length first");
        }
        else if (noteTypes.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select a note effect or none if there isn't one");
        }
        else if (rest.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please indicate whether your note is a single note, a rest, or part of a chord");
        }
        else {
            String string = (String)stringDropDownMenu.getModel().getSelectedItem();
            String fret = (String)fretDropDownMenu.getModel().getSelectedItem();
            int stringNum = Integer.parseInt(string);
            int fretNum = Integer.parseInt(fret);
            switch (tabWriter.selectionValid(fretNum)) {
                case 3:
                    JOptionPane.showMessageDialog(null, "Note effects cannot be applied to rests, please select none");
                case 2:
                    JOptionPane.showMessageDialog(null, "This note effect cannot be used on fret 0");
                    break;
                case 1:
                    JOptionPane.showMessageDialog(null, "Note effects cannot be applied to a chord, please select none");
                    break;
                default:
                    tabWriter.addNote(stringNum, fretNum);
                    tabOutputField.setText(tabWriter.displayOutput());
                    break;
            }
        }
    }//GEN-LAST:event_addNoteButtonActionPerformed

    private void dottedNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dottedNoteButtonActionPerformed
        // TODO add your handling code here:
        if (dottedNoteButton.isSelected()) {
            tabWriter.setNoteDotted(true);
        }
        else {
            tabWriter.setNoteDotted(false);
        }
    }//GEN-LAST:event_dottedNoteButtonActionPerformed

    private void thirtyTwothNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thirtyTwothNoteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNextNoteLength(32);
    }//GEN-LAST:event_thirtyTwothNoteButtonActionPerformed

    private void sixteenthNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixteenthNoteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNextNoteLength(16);
    }//GEN-LAST:event_sixteenthNoteButtonActionPerformed

    private void eighthNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eighthNoteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNextNoteLength(8);
    }//GEN-LAST:event_eighthNoteButtonActionPerformed

    private void wholeNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wholeNoteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNextNoteLength(1);
    }//GEN-LAST:event_wholeNoteButtonActionPerformed

    private void halfNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_halfNoteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNextNoteLength(2);
    }//GEN-LAST:event_halfNoteButtonActionPerformed

    private void quarterNoteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quarterNoteButtonActionPerformed
        // TODO add your handling code here:
        tabWriter.setNextNoteLength(4);
    }//GEN-LAST:event_quarterNoteButtonActionPerformed

    private void bassGuitarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bassGuitarButtonActionPerformed
        // TODO add your handling code here:
        if ("".equals(tabOutputField.getText())) {
            tabOutputField.setText("G |-\nD |-\nA |-\nE |-\n");
            tabWriter.setStringsNo(4);
            selectedInstrument = instruments.getSelection();
            stringDropDownMenu.setModel(tabWriter.bassStringModel);
        }
        else {
            int check = JOptionPane.showConfirmDialog(null, "This will delete any unsaved tab you have currently written, do you wish to continue?", null, JOptionPane.YES_NO_OPTION);
            if (check == 0) {
                tabOutputField.setText("G |-\nD |-\nA |-\nE |-\n");
                tabWriter.resetStrings(4);
                tabWriter.setStringsNo(4);
                selectedInstrument = instruments.getSelection();
                stringDropDownMenu.setModel(tabWriter.bassStringModel);
            }
            else {
                instruments.clearSelection();
                instruments.setSelected(selectedInstrument, true);
            }
        }
    }//GEN-LAST:event_bassGuitarButtonActionPerformed

    private void eightStringGuitarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightStringGuitarButtonActionPerformed
        // TODO add your handling code here:
        if ("".equals(tabOutputField.getText())) {
            tabOutputField.setText("E |-\nB |-\nG |-\nD |-\nA |-\nE |-\nB |-\nF#|-\n");
            tabWriter.setStringsNo(8);
            selectedInstrument = instruments.getSelection();
            stringDropDownMenu.setModel(tabWriter.eightStringModel);
        }
        else {
            int check = JOptionPane.showConfirmDialog(null, "This will delete any unsaved tab you have currently written, do you wish to continue?", null, JOptionPane.YES_NO_OPTION);
            if (check == 0) {
                tabOutputField.setText("E |-\nB |-\nG |-\nD |-\nA |-\nE |-\nB |-\nF#|-\n");
                tabWriter.resetStrings(8);
                tabWriter.setStringsNo(8);
                selectedInstrument = instruments.getSelection();
                stringDropDownMenu.setModel(tabWriter.eightStringModel);
            }
            else {
                instruments.clearSelection();
                instruments.setSelected(selectedInstrument, true);
            }
        }
    }//GEN-LAST:event_eightStringGuitarButtonActionPerformed

    private void sevenStringGuitarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenStringGuitarButtonActionPerformed
        // TODO add your handling code here:
        if ("".equals(tabOutputField.getText())) {
            tabOutputField.setText("E |-\nB |-\nG |-\nD |-\nA |-\nE |-\nB |-\n");
            tabWriter.setStringsNo(7);
            selectedInstrument = instruments.getSelection();
            stringDropDownMenu.setModel(tabWriter.sevenStringModel);
        }
        else {
            int check = JOptionPane.showConfirmDialog(null, "This will delete any unsaved tab you have currently written, do you wish to continue?", null, JOptionPane.YES_NO_OPTION);
            if (check == 0) {
                tabOutputField.setText("E |-\nB |-\nG |-\nD |-\nA |-\nE |-\nB |-\n");
                tabWriter.resetStrings(7);
                tabWriter.setStringsNo(7);
                selectedInstrument = instruments.getSelection();
                stringDropDownMenu.setModel(tabWriter.sevenStringModel);
            }
            else {
                instruments.clearSelection();
                instruments.setSelected(selectedInstrument, true);
            }
        }
    }//GEN-LAST:event_sevenStringGuitarButtonActionPerformed

    private void standardGuitarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardGuitarButtonActionPerformed
        // TODO add your handling code here:
        if("".equals(tabOutputField.getText())) {
            tabOutputField.setText("E |-\nB |-\nG |-\nD |-\nA |-\nE |-\n");
            tabWriter.setStringsNo(6);
            selectedInstrument = instruments.getSelection();
            stringDropDownMenu.setModel(tabWriter.standardStringModel);
        }
        else {
            int check = JOptionPane.showConfirmDialog(null, "This will delete any unsaved tab you have currently written, do you wish to continue?", null, JOptionPane.YES_NO_OPTION);
            if (check == 0) {
                tabOutputField.setText("E |-\nB |-\nG |-\nD |-\nA |-\nE |-\n");
                tabWriter.resetStrings(6);
                tabWriter.setStringsNo(6);
                selectedInstrument = instruments.getSelection();
                stringDropDownMenu.setModel(tabWriter.standardStringModel);
            }
            else {
                instruments.clearSelection();
                instruments.setSelected(selectedInstrument, true);
            }
        }
    }//GEN-LAST:event_standardGuitarButtonActionPerformed

    private void editSongInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSongInfoButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editSongInfoButtonActionPerformed

    private void searchTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextBoxActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        // TODO add your handling code here:
       tabOutputField.setText(tabWriter.undoLastNote());
    }//GEN-LAST:event_undoButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        int check = JOptionPane.showConfirmDialog(null, "This will delete any unsaved tab you have currently written, do you wish to continue?", null, JOptionPane.YES_NO_OPTION);
            if (check == 0) {
                String songName = JOptionPane.showInputDialog(null, "Enter the song name");
                String artistName = JOptionPane.showInputDialog(null, "Enter the artist name");
                String noOfStrings = JOptionPane.showInputDialog(null, "Enter the number of strings");
            try {
                tabOutputField.setText("");
                tabOutputField.setText(tabWriter.loadSong(songName, artistName, noOfStrings));
            } catch (FileNotFoundException ex) {
                Logger.getLogger(RunGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
    }//GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        String songName = JOptionPane.showInputDialog(null, "Enter the song name");
        String artistName = JOptionPane.showInputDialog(null, "Enter the artist name");
        tabWriter.saveSong(songName, artistName);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void bendAndReleaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bendAndReleaseButtonActionPerformed
        tabWriter.setNoteType(2);
    }//GEN-LAST:event_bendAndReleaseButtonActionPerformed

    private void preBendAndReleaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preBendAndReleaseButtonActionPerformed
        tabWriter.setNoteType(13);
    }//GEN-LAST:event_preBendAndReleaseButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String searchTerm = searchTextBox.getText();
        dbMgr.search(searchTerm);
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RunGUI().setVisible(true);
            }
        });
    }
    
    public void setup() {
        instruments = new ButtonGroup();
        instruments.add(standardGuitarButton);
        instruments.add(bassGuitarButton);
        instruments.add(sevenStringGuitarButton);
        instruments.add(eightStringGuitarButton);
        
        noteLengths = new ButtonGroup();
        noteLengths.add(quarterNoteButton);
        noteLengths.add(halfNoteButton);
        noteLengths.add(wholeNoteButton);
        noteLengths.add(eighthNoteButton);
        noteLengths.add(sixteenthNoteButton);
        noteLengths.add(thirtyTwothNoteButton);
        noteLengths.add(restButton);
        
        noteTypes = new ButtonGroup();
        noteTypes.add(palmMuteButton);
        noteTypes.add(bendButton);
        noteTypes.add(preBendButton);
        noteTypes.add(bendAndReleaseButton);
        noteTypes.add(preBendAndReleaseButton);
        noteTypes.add(hammerOnButton);
        noteTypes.add(pullOffButton);
        noteTypes.add(slideUpButton);
        noteTypes.add(slideDownButton);
        noteTypes.add(vibratoButton);
        noteTypes.add(harmonicButton);
        noteTypes.add(pinchHarmonicButton);
        noteTypes.add(tapNoteButton);
        noteTypes.add(noneButton);
        
        rest = new ButtonGroup();
        rest.add(restButton);
        rest.add(partOfChordButton);
        rest.add(singleNoteButton);
        
        tabWriter = new TabWriter();
        tabWriter.resetStrings(6);
        
        dbMgr = new DbMgr();
        dbMgr.connect();
        
    }
    
    private TabWriter tabWriter;
    private DbMgr dbMgr;
    private ButtonGroup instruments;
    private ButtonGroup noteLengths;
    private ButtonGroup noteTypes;
    private ButtonGroup rest;
    private ButtonModel selectedInstrument;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel addNewTabPanel;
    private javax.swing.JButton addNoteButton;
    private javax.swing.JRadioButton bassGuitarButton;
    private javax.swing.JRadioButton bendAndReleaseButton;
    private javax.swing.JRadioButton bendButton;
    private javax.swing.JPanel browseDatabasePanel;
    private javax.swing.JButton changeBeatsPerBarButton;
    private javax.swing.JScrollPane databaseResultsBox;
    private javax.swing.JTable databaseResultsTable;
    private javax.swing.JRadioButton dottedNoteButton;
    private javax.swing.JButton editSongInfoButton;
    private javax.swing.JButton editTuningButton;
    private javax.swing.JRadioButton eightStringGuitarButton;
    private javax.swing.JRadioButton eighthNoteButton;
    private javax.swing.JButton finishChordButton;
    private javax.swing.JComboBox<String> fretDropDownMenu;
    private javax.swing.JLabel fretLabel;
    private javax.swing.JRadioButton halfNoteButton;
    private javax.swing.JRadioButton hammerOnButton;
    private javax.swing.JRadioButton harmonicButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JRadioButton noneButton;
    private javax.swing.JRadioButton palmMuteButton;
    private javax.swing.JRadioButton partOfChordButton;
    private javax.swing.JRadioButton pinchHarmonicButton;
    private javax.swing.JRadioButton preBendAndReleaseButton;
    private javax.swing.JRadioButton preBendButton;
    private javax.swing.JRadioButton pullOffButton;
    private javax.swing.JRadioButton quarterNoteButton;
    private javax.swing.JRadioButton restButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTextBox;
    private javax.swing.JRadioButton sevenStringGuitarButton;
    private javax.swing.JRadioButton singleNoteButton;
    private javax.swing.JRadioButton sixteenthNoteButton;
    private javax.swing.JRadioButton slideDownButton;
    private javax.swing.JRadioButton slideUpButton;
    private javax.swing.JRadioButton standardGuitarButton;
    private javax.swing.JComboBox<String> stringDropDownMenu;
    private javax.swing.JLabel stringLabel;
    private javax.swing.JTextArea tabOutputField;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JRadioButton tapNoteButton;
    private javax.swing.JRadioButton thirtyTwothNoteButton;
    private javax.swing.JButton undoButton;
    private javax.swing.JRadioButton vibratoButton;
    private javax.swing.JRadioButton wholeNoteButton;
    // End of variables declaration//GEN-END:variables
}
